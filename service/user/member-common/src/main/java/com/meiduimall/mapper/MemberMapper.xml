<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 会员表 ms_members相关操作 -->
<mapper namespace="MemberMapper">

	<!-- 根据userid查询推荐人信息 -->
	<select id="getShareManByUserId" resultType="String" parameterType="String">
		SELECT m.mem_id FROM ms_members m 
		WHERE m.mem_id = (SELECT ms.mem_parent_id FROM ms_members ms WHERE ms.mem_login_name = #{shareMan} OR ms.mem_email = #{shareMan} OR ms.mem_phone = #{shareMan})
	</select>
	
	<!-- 根据userid查询会员ID -->
	<select id="getMemIdByUserId" parameterType="String" resultType="String">
		SELECT ms.mem_id FROM ms_members ms WHERE ms.mem_login_name = #{userId} OR ms.mem_email = #{userId} OR ms.mem_phone = #{userId}
	</select>
	
	<!-- 根据userid查询会员ID和手机号 -->
	<select id="getMemIdAndPhoneByUserId" parameterType="java.util.Map" resultType="com.meiduimall.model.MemberGet">
		select
		mem_id AS memId,mem_phone AS memPhone,mem_basic_account_total_quantity as memBasicAccountTotalQuantity  from   ms_members
		<if test="encryValue !=null and encryValue !=''">
		    where  mem_login_name=#{encryValue}  or mem_email=#{encryValue}  or mem_phone=#{encryValue}
		</if>
		<if test="depytValue !=null and depytValue !=''">
		      or  mem_id=#{depytValue}
		</if>
	</select> 
	
	<!-- 根据会员ID查询会员信息 -->
	<select id="getMemberByMemId" resultType="com.meiduimall.model.MemberGet" parameterType="java.util.Map">
		SELECT m.mem_id AS memId, m.mem_login_name AS memLoginName, m.mem_nick_name AS memNickName , m.mem_email AS memEmail, m.mem_phone AS memPhone, m.mem_name AS memName, m.mem_parent_id AS memParentId, m.mem_parent_value3 AS memParentValue3, m.mem_created_date AS memCreatedDate FROM ms_members m
		WHERE m.mem_id IN (${memId})
		<if test="limit != null and limit != ''">
			${limit}
		</if>
	</select>
	
	<!-- 根据会员ID查询会员信息 -->
	<select id="getMemberInfoByMemId" resultType="com.meiduimall.dto.MemberBasicInfoDTO" parameterType="java.lang.String">
		SELECT m.mem_id AS memId,m.mem_phone AS phone,m.mem_nick_name AS nick_name,m.mem_created_date AS registertime,
	    m.mem_basic_account_total_quantity AS totalpoints,m.mem_pic AS pic_url,
		m.mem_present_level AS level_name,m.mem_integral_consume_coupon AS consume_coupon,
		m.mem_email AS email,m.mem_birthday AS birthday,m.mem_sex AS sex,
		m.mem_name AS name,m.mem_login_name AS user_id,mem_first_preorder_rank AS memFirstPreOrderRank ,mem_reg_year AS memRegYear,mem_reg_month AS memRegMonth,mem_reg_day AS memRegDay
		FROM ms_members AS m WHERE m.mem_id=#{memid}
	</select>
	
	<!-- 根据会员ID查手机号和账户余额 -->
	<select id="getPhoneAndAccountScoreByMemId" parameterType="java.lang.String" resultType="com.meiduimall.model.MemberGet">
	select mem_id as memId,mem_phone as memPhone,mem_basic_account_total_quantity as memBasicAccountQuantity,mem_basic_account_total_quantity as memBasicAccountTotalQuantity  from   ms_members
	  <if test="_parameter !=null and _parameter!=''">
	      where mem_id=#{_parameter}
	  </if>
	</select>
	
	<!-- 根据userid和密码查询会员信息 -->
	<select id="getMemberByUserIdAndPassword" parameterType="java.util.Map" resultType="com.meiduimall.model.MemberGet">
	   SELECT m.mem_lock_count AS memLockCount, m.`mem_login_time` AS memLoginTime,m.`mem_login_name` AS memLoginName,m.`mem_is_allow_shop` AS memIsAllowShop,m.mem_nick_name  AS memNickName,
	    m.`mem_id` AS memId, m.dict_mem_status AS dictMemStatus FROM ms_members m 
	    WHERE 1=1 AND (m.`mem_login_name`=#{userid} OR m.`mem_phone`=#{userid} OR m.`mem_email`=#{userid}) 
	    AND (m.`mem_login_pwd`=#{1gw_pwd} OR m.`mem_login_pwd`=#{md_pwd})  
	</select>
	<!--根据登录用户名，手机号码，邮箱地址查询会员ID-->
	<select id="getMemberIdByPLName" parameterType="java.lang.String" resultType="com.meiduimall.model.MemberGet">
	   select m.mem_id as memId from ms_members as m where  m.mem_login_name=#{_parameter}  or m.mem_phone=#{_parameter}  or m.mem_email=#{_parameter}
	</select>
	<!--根据会员ID,会员登录密码统计会员信息记录-->
	<select id="getMemberRecordByTarget" resultType="java.lang.Integer" parameterType="java.util.Map">
	    select count(1)  from  ms_members m 
	    <if test="(memIdOne !=null and memIdOne !='') and (memLoginPwdOne !=null and memLoginPwdOne !='') and (memLoginPwdTwo !=null and memLoginPwdTwo !='')">
	        where   m.mem_id=#{memIdOne}  and (m.mem_login_pwd=#{memLoginPwdOne}  or  m.mem_login_pwd=#{memLoginPwdTwo})
	    </if>
	    <if test="(memIdTwo !=null and memIdTwo !='') and (memLoginPwdThree !=null and memLoginPwdThree !='')">
	        where   m.mem_id=#{memIdTwo}  and  m.mem_login_pwd=#{memLoginPwdThree}
	    </if>
	</select>
	
	<!-- 根据会员ID更新会员登录密码 -->
	<update id="updateMemberLoginPwdByMemId"   parameterType="java.util.Map">
	   update  ms_members   set  mem_login_pwd=#{one_pass_word}   where  mem_id=#{memberId}
	</update>
	
	<!--登录成功更新用户的状态 -->
	<update id="updateMemberStatusAfterLoginSuccess" parameterType="com.meiduimall.model.MemberGet">
	   update ms_members m set m.`mem_license_key`=#{licenseKey},m.mem_last_login_time=#{pfLastLoginTime},m.`mem_login_time`=#{memLoginTime},m.`dict_mem_status`=#{dictMemStatus} where m.`mem_id`=#{memId}  
	</update>
	
	<!--统计用户被锁定的次数-->
	<update id="updateMemberLockStatusCount" parameterType="com.meiduimall.model.MemberGet">
	      UPDATE ms_members m SET m.`mem_lock_count`=#{memLockCount} WHERE m.`mem_id`=#{memId}  
	</update>

	<!-- 根据会员ID更新账户余额 -->
	<update id="updateAccountPointsByMemId" parameterType="java.util.Map">
	   update  ms_members   set  mem_basic_account_total_quantity=#{addAtq}  where mem_id=#{memId}
	</update>
	
	<!-- 根据会员ID查询会员表中的所有信息 -->
	<select id="getMembersInfoByMemId" parameterType="String" resultType="com.meiduimall.model.MemberGet">
		SELECT 
		  mem_id AS memId,
		  mem_old_email AS memOldEmail,
		  mem_email AS memEmail,
		  mem_login_name AS memLoginName,
		  mem_license_key AS licenseKey,
		  mem_old_phone AS memOldPhone,
		  mem_phone AS memPhone,
		  mem_nick_name AS memNickName,
		  mem_login_pwd AS memLoginPwd,
		  mem_pay_pwd AS memPayPwd,
		  mem_parent_id AS memParentId,
		  dict_mem_status AS dictMemStatus,
		  mem_is_all_activated AS memIsAllActivated,
		  mem_created_date AS memCreatedDate,
		  mem_updated_date AS memUpdatedDate,
		  mem_sex AS memSex,
		  mem_birthday AS memBirthday,
		  mem_pic AS memPic,
		  mem_current_address AS memCurrentAddress,
		  mem_reg_year AS memRegYear,
		  mem_reg_month AS memRegMonth,
		  mem_reg_day AS memRegDay,
		  mem_updated_by AS memUpdatedBy,
		  mem_created_by AS memCreatedBy,
		  mem_created_category AS memCreatedCategory,
		  mem_parent_value1 AS memParentValue1,
		  mem_parent_value2 AS memParentValue2,
		  mem_parent_value3 AS memParentValue3,
		  mem_basic_account_total_quantity AS memBasicAccountTotalQuantity,
		  mem_basic_account_status AS memBasicAccountStatus,
		  mem_integral_consume_original AS memIntegralConsumeOrignal,
		  mem_integral_current_results AS memIntegralCurrentResults,
		  mem_integral_trade_original AS memIntegralTradeOriginal,
		  mem_integral_trade_profit AS memIntegralTradeProfit,
		  mem_integral_consume_profit AS memIntegralConsumeProfit,
		  mem_integral_current_valid_trade_intetgral AS memIntegralCurrentValidTradeIntegral,
		  mem_integral_current_traded_integral AS memIntegralCurrentTradedIntegral,
		  mem_integral_next_valid_trade_integral AS memIntegralNextVaidTradeIntegral,
		  mem_integral_fist_return_integral AS memIntegralFirstReturnIntegral,
		  mem_integral_returned_integral AS memIntegralRetrunedIntegral,
		  mem_integral_surplus_integral AS memIntegralSurplusIntegral,
		  mem_integral_capital_increase AS memIntegralCapitalIncrease,
		  mem_integral_status AS memIntegralStatus,
		  mem_integral_consume_returned_all AS memIntegralConsumeReturnedALL,
		  mem_integral_consume_returned AS memIntegralConsumeReturned,
		  mem_integral_consume_will_return AS memIntegralConsumeWillReturn,
		  mem_wallet_url AS memWallentUrl,
		  mem_last_login_time AS pfLastLoginTime,
		  mem_preorder_right AS memPreorderRight,
		  mem_name AS memName,
		  mem_level_dict_id AS memLevelDictId,
		  mem_integral_init_results AS memIntegralInitResults,
		  mem_integral_increated_results AS memIntegralIncreatedResults,
		  mem_sign_source AS memSignSource,
		  mem_present_level AS memPresentLevel,
		  mem_integral_balance AS memintegralBalance,
		  mem_integral_consume_coupon AS memIntegralConsumeCoupon,
		  mem_type AS memType,
		  mem_integral_frozen AS memIntegralFrozen,
		  mem_is_preorder_rights AS memIsPreorderRights,
		  mem_is_allow_shop AS memIsAllowShop,
		  mem_group_level AS memGroupLevel,
		  mem_ban_date AS memBanDate,
		  mem_is_consume_return_all AS memIsConsumeReturnAll,
		  mem_login_time AS memLoginTime,
		  mem_change_phone_date AS changePhoneDate,
		  mem_cancelorder AS memCancelorder,
		  mem_total_profit AS memTotalProfit,
		  mem_total_consume_profit AS memTotalConsumeProfit,
		  mem_first_preorder_rank AS memFirstPreOrderRank,
		  mem_lock_count AS memLockCount,
		  mem_tw_current_address AS memTwCurrentAddress,
		  mem_login_name_isdefault_ischanged AS memLoginNameIsdefaultIschanged,
		  mem_parent_isdefault_ischanged AS memParentIsdefaultIschanged 
		FROM ms_members
		WHERE mem_id = #{memId}
	</select>
	
	<!-- 更改手机号码 -->
	<update id="updateMemberPhoneByMemId" parameterType="Map">
		UPDATE ms_members SET mem_old_phone = #{oldPhone}, mem_phone = #{newPhone}, mem_updated_date = #{updateDate}, mem_change_phone_date = #{updateDate} WHERE mem_id = #{memId}
	</update>
	
	<!-- 修改会员基本信息 -->
	<update id="updateMemberInfoByMemId" parameterType="com.meiduimall.model.MemberSet">
		UPDATE ms_members SET mem_id = #{memId}
		<if test="memOldEmail != null and memOldEmail != ''">, mem_old_email = #{memOldEmail}</if>
		<if test="memEmail != null and memEmail != ''">, mem_email = #{memEmail}</if>
		<if test="memLoginName != null and memLoginName != ''">, mem_login_name = #{memLoginName}</if>
		<if test="licenseKey != null and licenseKey != ''">, mem_license_key = #{licenseKey}</if>
		<if test="memOldPhone != null and memOldPhone != ''">, mem_old_phone = #{memOldPhone}</if>
		<if test="memPhone != null and memPhone != ''">, mem_phone = #{memPhone}</if>
		<if test="memNickName != null and memNickName != ''">, mem_nick_name = #{memNickName}</if>
		<if test="memLoginPwd != null and memLoginPwd != ''">, mem_login_pwd = #{memLoginPwd}</if>
		<if test="memPayPwd != null and memPayPwd != ''">, mem_pay_pwd = #{memPayPwd}</if>
		<if test="memParentId != null and memParentId != ''">, mem_parent_id = #{memParentId}</if>
		<if test="dictMemStatus != null and dictMemStatus != ''">, dict_mem_status = #{dictMemStatus}</if>
		<if test="memIsAllActivated != null and memIsAllActivated != ''">, mem_is_all_activated = #{memIsAllActivated}</if>
		<if test="memCreatedDate != null">, mem_created_date = #{memCreatedDate}</if>
		<if test="memUpdatedDate != null">, mem_updated_date = #{memUpdatedDate}</if>
		<if test="memSex != null and memSex != ''">, mem_sex = #{memSex}</if>
		<if test="memBirthday != null">, mem_birthday = #{memBirthday}</if>
		<if test="memPic != null and memPic != ''">, mem_pic = #{memPic}</if>
		<if test="memCurrentAddress != null and memCurrentAddress != ''">, mem_current_address = #{memCurrentAddress}</if>
		<if test="memRegYear != null">, mem_reg_year = #{memRegYear}</if>
		<if test="memRegMonth != null">, mem_reg_month = #{memRegMonth}</if>
		<if test="memRegDay != null">, mem_reg_day = #{memRegDay}</if>
		<if test="memUpdatedBy != null and memUpdatedBy != ''">, mem_updated_by = #{memUpdatedBy}</if>
		<if test="memCreatedBy != null and memCreatedBy != ''">, mem_created_by = #{memCreatedBy}</if>
		<if test="memCreatedCategory != null">, mem_created_category = #{memCreatedCategory}</if>
		<if test="memParentValue1 != null and memParentValue1 != ''">, mem_parent_value1 = #{memParentValue1}</if>
		<if test="memParentValue2 != null and memParentValue2 != ''">, mem_parent_value2 = #{memParentValue2}</if>
		<if test="memParentValue3 != null and memParentValue3 != ''">, mem_parent_value3 = #{memParentValue3}</if>
		<if test="memBasicAccountTotalQuantity != null and memBasicAccountTotalQuantity != ''">, mem_basic_account_total_quantity = #{memBasicAccountTotalQuantity}</if>
		<if test="memBasicAccountStatus != null and memBasicAccountStatus != ''">, mem_basic_account_status = #{memBasicAccountStatus}</if>
		<if test="memIntegralConsumeOrignal != null and memIntegralConsumeOrignal != ''">, mem_integral_consume_original = #{memIntegralConsumeOrignal}</if>
		<if test="memIntegralCurrentResults != null and memIntegralCurrentResults != ''">, mem_integral_current_results = #{memIntegralCurrentResults}</if>
		<if test="memIntegralTradeOriginal != null and memIntegralTradeOriginal != ''">, mem_integral_trade_original = #{memIntegralTradeOriginal}</if>
		<if test="memIntegralTradeProfit != null and memIntegralTradeProfit != ''">, mem_integral_trade_profit = #{memIntegralTradeProfit}</if>
		<if test="memIntegralConsumeProfit != null and memIntegralConsumeProfit != ''">, mem_integral_consume_profit = #{memIntegralConsumeProfit}</if>
		<if test="memIntegralCurrentValidTradeIntegral != null and memIntegralCurrentValidTradeIntegral != ''">, mem_integral_current_valid_trade_intetgral = #{memIntegralCurrentValidTradeIntegral}</if>
		<if test="memIntegralCurrentTradedIntegral != null and memIntegralCurrentTradedIntegral != ''">, mem_integral_current_traded_integral = #{memIntegralCurrentTradedIntegral}</if>
		<if test="memIntegralNextVaidTradeIntegral != null and memIntegralNextVaidTradeIntegral != ''">, mem_integral_next_valid_trade_integral = #{memIntegralNextVaidTradeIntegral}</if>
		<if test="memIntegralFirstReturnIntegral != null and memIntegralFirstReturnIntegral != ''">, mem_integral_fist_return_integral = #{memIntegralFirstReturnIntegral}</if>
		<if test="memIntegralRetrunedIntegral != null and memIntegralRetrunedIntegral != ''">, mem_integral_returned_integral = #{memIntegralRetrunedIntegral}</if>
		<if test="memIntegralSurplusIntegral != null and memIntegralSurplusIntegral != ''">, mem_integral_surplus_integral = #{memIntegralSurplusIntegral}</if>
		<if test="memIntegralCapitalIncrease != null and memIntegralCapitalIncrease != ''">, mem_integral_capital_increase = #{memIntegralCapitalIncrease}</if>
		<if test="memIntegralStatus != null and memIntegralStatus != ''">, mem_integral_status = #{memIntegralStatus}</if>
		<if test="memIntegralConsumeReturnedALL != null and memIntegralConsumeReturnedALL != ''">, mem_integral_consume_returned_all = #{memIntegralConsumeReturnedALL}</if>
		<if test="memIntegralConsumeReturned != null and memIntegralConsumeReturned != ''">, mem_integral_consume_returned = #{memIntegralConsumeReturned}</if>
		<if test="memIntegralConsumeWillReturn != null and memIntegralConsumeWillReturn != ''">, mem_integral_consume_will_return = #{memIntegralConsumeWillReturn}</if>
		<if test="memWallentUrl != null and memWallentUrl != ''">, mem_wallet_url = #{memWallentUrl}</if>
		<if test="pfLastLoginTime != null">, mem_last_login_time = #{pfLastLoginTime}</if>
		<if test="memPreorderRight != null and memPreorderRight != ''">, mem_preorder_right = #{memPreorderRight}</if>
		<if test="memName != null and memName != ''">, mem_name = #{memName}</if>
		<if test="memLevelDictId != null and memLevelDictId != ''">, mem_level_dict_id = #{memLevelDictId}</if>
		<if test="memIntegralInitResults != null and memIntegralInitResults != ''">, mem_integral_init_results = #{memIntegralInitResults}</if>
		<if test="memIntegralIncreatedResults != null and memIntegralIncreatedResults != ''">, mem_integral_increated_results = #{memIntegralIncreatedResults}</if>
		<if test="memSignSource != null and memSignSource != ''">, mem_sign_source = #{memSignSource}</if>
		<if test="memPresentLevel != null and memPresentLevel != ''">, mem_present_level = #{memPresentLevel}</if>
		<if test="memintegralBalance != null and memintegralBalance != ''">, mem_integral_balance = #{memintegralBalance}</if>
		<if test="memIntegralConsumeCoupon != null and memIntegralConsumeCoupon != ''">, mem_integral_consume_coupon = #{memIntegralConsumeCoupon}</if>
		<if test="memType != null and memType != ''">, mem_type = #{memType}</if>
		<if test="memIntegralFrozen != null and memIntegralFrozen != ''">, mem_integral_frozen = #{memIntegralFrozen}</if>
		<if test="memIsPreorderRights != null and memIsPreorderRights != ''">, mem_is_preorder_rights = #{memIsPreorderRights}</if>
		<if test="memIsAllowShop != null and memIsAllowShop != ''">, mem_is_allow_shop = #{memIsAllowShop}</if>
		<if test="memGroupLevel != null and memGroupLevel != ''">, mem_group_level = #{memGroupLevel}</if>
		<if test="memBanDate != null">, mem_ban_date = #{memBanDate}</if>
		<if test="memIsConsumeReturnAll != 0">, mem_is_consume_return_all = #{memIsConsumeReturnAll}</if>
		<if test="memLoginTime != null">, mem_login_time = #{memLoginTime}</if>
		<if test="changePhoneDate != null">, mem_change_phone_date = #{changePhoneDate}</if>
		<if test="memCancelorder != null and memCancelorder != ''">, mem_cancelorder = #{memCancelorder}</if>
		<if test="memTotalProfit != null and memTotalProfit != ''">, mem_total_profit = #{memTotalProfit}</if>
		<if test="memTotalConsumeProfit != null and memTotalConsumeProfit != ''">, mem_total_consume_profit = #{memTotalConsumeProfit}</if>
		<if test="memFirstPreOrderRank != null and memFirstPreOrderRank != ''">, mem_first_preorder_rank = #{memFirstPreOrderRank}</if>
		<if test="memLockCount != null and memLockCount != ''">, mem_lock_count = #{memLockCount}</if>
		<if test="memTwCurrentAddress != null and memTwCurrentAddress != ''">, mem_tw_current_address = #{memTwCurrentAddress}</if>
		<if test="memLoginNameIsdefaultIschanged != null and memLoginNameIsdefaultIschanged != ''">, mem_login_name_isdefault_ischanged = #{memLoginNameIsdefaultIschanged}</if>
		<if test="memParentIsdefaultIschanged != null and memParentIsdefaultIschanged != ''">, mem_parent_isdefault_ischanged = #{memParentIsdefaultIschanged}</if>
		 WHERE mem_id = #{memId}
	</update>
	
</mapper>